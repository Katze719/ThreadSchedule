name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  # Build and test on Linux with multiple C++ standards
  linux-build:
    name: Linux (${{ matrix.os }}, C++${{ matrix.cpp_standard }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        cpp_standard: [17, 20, 23]
        compiler: [gcc, clang]
        include:
          - compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - compiler: clang
            cc: clang-14
            cxx: clang++-14
          - os: ubuntu-24.04
            cpp_standard: 20
            compiler: clang-18
            cc: clang-18
            cxx: clang++-18
          - os: ubuntu-24.04
            cpp_standard: 23
            compiler: clang-18
            cc: clang-18
            cxx: clang++-18
        exclude:
          # Clang 14 is too old for GCC 14's libstdc++ on Ubuntu 24.04 with C++20/23
          - os: ubuntu-24.04
            compiler: clang
            cpp_standard: 20
          - os: ubuntu-24.04
            compiler: clang
            cpp_standard: 23
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-11 g++-12 g++-13
        elif [ "${{ matrix.compiler }}" = "clang-18" ]; then
          sudo apt-get install -y clang-18
        else
          sudo apt-get install -y clang-14 clang-15
        fi
    
    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} \
          -DTHREADSCHEDULE_BUILD_EXAMPLES=ON \
          -DTHREADSCHEDULE_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --parallel
    
    - name: Run examples
      run: |
        cd build/examples
        timeout 10 ./basic_example || true
        timeout 10 ./performance_benchmark || true

  # Build and test on Windows
  windows-build:
    name: Windows (C++${{ matrix.cpp_standard }}, ${{ matrix.compiler }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        cpp_standard: [17, 20, 23]
        compiler: [msvc]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Install Ninja
      run: choco install ninja
    
    - name: Configure CMake
      run: |
        $extraFlags = ""
        if ("${{ matrix.cpp_standard }}" -eq "17") {
          $extraFlags = "-DCMAKE_CXX_FLAGS=/permissive-"
        }
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} -DTHREADSCHEDULE_BUILD_EXAMPLES=ON -DTHREADSCHEDULE_BUILD_TESTS=ON $extraFlags
    
    - name: Build
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --parallel

  # Integration tests
  integration-test:
    name: Integration Test (${{ matrix.method }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        method: [subdirectory, fetchcontent, cpm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ThreadSchedule
    
    - name: Test add_subdirectory
      if: matrix.method == 'subdirectory'
      run: |
        mkdir test_project
        cd test_project
        
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.14)
        project(TestProject LANGUAGES CXX)
        set(CMAKE_CXX_STANDARD 17)
        add_subdirectory(../ThreadSchedule ThreadSchedule)
        add_executable(test_app main.cpp)
        target_link_libraries(test_app PRIVATE ThreadSchedule::ThreadSchedule)
        EOF
        
        cat > main.cpp << 'EOF'
        #include <threadschedule/threadschedule.hpp>
        #include <iostream>
        int main() {
            using namespace threadschedule;
            ThreadWrapper thread([]() { 
                std::cout << "Thread running!" << std::endl; 
            });
            thread.set_name("test");
            thread.join();
            return 0;
        }
        EOF
        
        cmake -B build
        cmake --build build
        ./build/test_app
    
    - name: Test FetchContent
      if: matrix.method == 'fetchcontent'
      run: |
        mkdir test_project
        cd test_project
        
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.14)
        project(TestProject LANGUAGES CXX)
        set(CMAKE_CXX_STANDARD 17)
        include(FetchContent)
        FetchContent_Declare(ThreadSchedule SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../ThreadSchedule)
        FetchContent_MakeAvailable(ThreadSchedule)
        add_executable(test_app main.cpp)
        target_link_libraries(test_app PRIVATE ThreadSchedule::ThreadSchedule)
        EOF
        
        cat > main.cpp << 'EOF'
        #include <threadschedule/threadschedule.hpp>
        #include <iostream>
        int main() {
            using namespace threadschedule;
            HighPerformancePool pool(2);
            auto future = pool.submit([]() { return 42; });
            std::cout << "Result: " << future.get() << std::endl;
            return 0;
        }
        EOF
        
        cmake -B build
        cmake --build build
        ./build/test_app
    
    - name: Test CPM
      if: matrix.method == 'cpm'
      run: |
        mkdir test_project
        cd test_project
        
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.14)
        project(TestProject LANGUAGES CXX)
        set(CMAKE_CXX_STANDARD 17)
        
        # Download CPM
        file(DOWNLOAD https://github.com/cpm-cmake/CPM.cmake/releases/download/v0.40.8/CPM.cmake
             ${CMAKE_BINARY_DIR}/cmake/CPM.cmake)
        include(${CMAKE_BINARY_DIR}/cmake/CPM.cmake)
        
        CPMAddPackage(NAME ThreadSchedule SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../ThreadSchedule)
        
        add_executable(test_app main.cpp)
        target_link_libraries(test_app PRIVATE ThreadSchedule::ThreadSchedule)
        EOF
        
        cat > main.cpp << 'EOF'
        #include <threadschedule/threadschedule.hpp>
        int main() {
            using namespace threadschedule;
            ThreadWrapper thread([]() {});
            thread.join();
            return 0;
        }
        EOF
        
        cmake -B build
        cmake --build build
        ./build/test_app

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install clang-format
      run: sudo apt-get install -y clang-format-14
    
    - name: Check formatting
      run: |
        find include -name "*.hpp" -o -name "*.cpp" | xargs clang-format-14 --dry-run --Werror
    
    - name: Check CMake formatting
      run: |
        # Basic checks for CMake files
        for file in CMakeLists.txt */CMakeLists.txt; do
          if [ -f "$file" ]; then
            echo "Checking $file"
            # Check for tabs (spaces preferred in CMake)
            if grep -q $'\t' "$file"; then
              echo "ERROR: Found tabs in $file, please use spaces"
              exit 1
            fi
          fi
        done
