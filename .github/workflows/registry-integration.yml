name: Registry Integration Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  integration-test-linux:
    name: Registry Integration (Linux)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
    
    - name: Install ThreadSchedule (header-only)
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build
        cmake --install build

    - name: App Injection Integration Scenario
      run: |
        cd integration_tests/app_injection
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Composite Merge Integration Scenario
      run: |
        cd integration_tests/composite_merge
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Runtime Single Registry Scenario
      run: |
        cmake -B build_runtime -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DTHREADSCHEDULE_RUNTIME=ON \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build_runtime
        cmake --install build_runtime
        
        cd integration_tests/runtime_single
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DTHREADSCHEDULE_RUNTIME=ON \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        export LD_LIBRARY_PATH=${{ github.workspace }}/install/lib:$LD_LIBRARY_PATH
        ctest --test-dir build --output-on-failure

  integration-test-linux-arm:
    name: Registry Integration (Linux ARM64)
    runs-on: ubuntu-24.04-arm
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build g++
    
    - name: Install ThreadSchedule (header-only)
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build
        cmake --install build

    - name: App Injection Integration Scenario
      run: |
        cd integration_tests/app_injection
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Composite Merge Integration Scenario
      run: |
        cd integration_tests/composite_merge
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Runtime Single Registry Scenario
      run: |
        cmake -B build_runtime -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DTHREADSCHEDULE_RUNTIME=ON \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build_runtime
        cmake --install build_runtime
        
        cd integration_tests/runtime_single
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DTHREADSCHEDULE_RUNTIME=ON \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        export LD_LIBRARY_PATH=${{ github.workspace }}/install/lib:$LD_LIBRARY_PATH
        ctest --test-dir build --output-on-failure

  integration-test-windows:
    name: Registry Integration (Windows)
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Install Ninja
      run: choco install ninja --no-progress --yes
    
    - name: Install ThreadSchedule (header-only)
      run: |
        cmake -B build -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build
        cmake --install build

    - name: App Injection Integration Scenario
      run: |
        cd integration_tests/app_injection
        cmake -B build -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Composite Merge Integration Scenario
      run: |
        cd integration_tests/composite_merge
        cmake -B build -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        ctest --test-dir build --output-on-failure

    - name: Runtime Single Registry Scenario
      run: |
        cmake -B build_runtime -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DTHREADSCHEDULE_RUNTIME=ON `
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install/threadschedule
        cmake --build build_runtime
        cmake --install build_runtime
        
        cd integration_tests/runtime_single
        cmake -B build -G Ninja `
          -DCMAKE_BUILD_TYPE=Release `
          -DTHREADSCHEDULE_RUNTIME=ON `
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/install/threadschedule
        cmake --build build
        $env:PATH = "${{ github.workspace }}/install/bin;$env:PATH"
        ctest --test-dir build --output-on-failure
