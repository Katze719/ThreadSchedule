name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  # Test on Linux with multiple C++ standards
  linux:
    name: Linux (${{ matrix.os }}, C++${{ matrix.cpp_standard }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        cpp_standard: [17, 20, 23]
        compiler: [gcc, clang]
        include:
          - compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - compiler: clang
            cc: clang-14
            cxx: clang++-14
          - os: ubuntu-24.04
            cpp_standard: 20
            compiler: clang-18
            cc: clang-18
            cxx: clang++-18
          - os: ubuntu-24.04
            cpp_standard: 23
            compiler: clang-18
            cc: clang-18
            cxx: clang++-18
        exclude:
          # Clang 14 is too old for GCC 14's libstdc++ on Ubuntu 24.04 with C++20/23
          - os: ubuntu-24.04
            compiler: clang
            cpp_standard: 20
          - os: ubuntu-24.04
            compiler: clang
            cpp_standard: 23
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-11 g++-12 g++-13
        elif [ "${{ matrix.compiler }}" = "clang-18" ]; then
          sudo apt-get install -y clang-18
        else
          sudo apt-get install -y clang-14 clang-15
        fi
    
    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} \
          -DTHREADSCHEDULE_BUILD_EXAMPLES=ON \
          -DTHREADSCHEDULE_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --parallel

  # Removed macOS job per request

  # Test on Windows
  windows:
    name: Windows (C++${{ matrix.cpp_standard }}, ${{ matrix.compiler }}, ${{ matrix.image }})
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        cpp_standard: [17, 20, 23]
        compiler: [msvc, mingw]
        image: [windows-2019, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSVC (Developer Command Prompt)
      if: matrix.compiler == 'msvc'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Setup MinGW
      if: matrix.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
    
    - name: Install Ninja (MSVC)
      if: matrix.compiler == 'msvc'
      run: choco install ninja --no-progress --yes
    
    - name: Configure CMake (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} -DTHREADSCHEDULE_BUILD_EXAMPLES=ON -DTHREADSCHEDULE_BUILD_TESTS=ON -Dgtest_force_shared_crt=ON
    
    - name: Configure CMake (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} \
          -DTHREADSCHEDULE_BUILD_EXAMPLES=ON \
          -DTHREADSCHEDULE_BUILD_TESTS=ON
    
    - name: Build (MSVC)
      if: matrix.compiler == 'msvc'
      run: cmake --build build --parallel
    
    - name: Build (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: cmake --build build --parallel
    
    - name: Run tests (MSVC)
      if: matrix.compiler == 'msvc'
      run: |
        cd build
        ctest --output-on-failure --parallel
    
    - name: Run tests (MinGW)
      if: matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
        cd build
        ctest --output-on-failure --parallel

